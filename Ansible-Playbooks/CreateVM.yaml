---
- hosts: esxi
  # Load variable files containing dynamic values and credentials
  vars_files:
    - /home/deploymentvm/Desktop/IaC-Automated-Network-Server-Deployment-for-Menards/automation-frontend/vars.yaml
    - /home/deploymentvm/Desktop/IaC-Automated-Network-Server-Deployment-for-Menards/Ansible-Playbooks/vars/pass.yaml
  become: false

  # Calculate how many days are left before the VM's expiration date
  tasks:
    - name: Calculate duration (days) between now and expiration date
      set_fact:
        vm_lifetime_days: "{{ ((expiration | to_datetime('%Y-%m-%d')) - (ansible_date_time.date | to_datetime('%Y-%m-%d'))).days | default(1) }}"
    
    # Remove any ISO duplicates
    - name: Delete previous ISO for this VM (if any)
      ansible.builtin.shell: >
        vim-cmd vmsvc/getallvms | grep {{ vm_name }} || true
      ignore_errors: true
      when: os == "Ubuntu"
    
    # Upload Windows unattend ISO
    - name: Upload Windows unattend ISO to datastore
      community.vmware.vsphere_copy:
        hostname: "10.0.1.40"
        username: "root"
        password: "CNIT490sp25"
        validate_certs: false
        src: "/home/deploymentvm/Desktop/IaC-Automated-Network-Server-Deployment-for-Menards/Ansible-Playbooks/unattend.iso"
        datacenter: "ha-datacenter"
        datastore: "VMs"
        path: "ISOs/{{ vm_name }}_unattend.iso"
      when: os == "Windows"  
      delegate_to: localhost
      
    # Upload Ubuntu autoinstall ISO
    - name: Upload Ubuntu autoinstall ISO to datastore
      community.vmware.vsphere_copy:
        hostname: "10.0.1.40"
        username: "root"
        password: "CNIT490sp25"
        validate_certs: false
        src: "/home/deploymentvm/ubuntu-iso-new/{{ vm_name }}_ubuntu.iso"
        datacenter: "ha-datacenter"
        datastore: "VMs"
        path: "Ubuntu Files/{{ vm_name }}_ubuntu.iso"
      when: os == "Ubuntu"
      delegate_to: localhost
      
    # Define the correct ISO paths to use for the VM based on selected OS  
    - name: Set ISO paths based on OS
      set_fact:
        os_iso_path: >-
          {{ '[VMs] ISOs/Win11_24H2_English_x64.iso' if os == 'Windows' else '[VMs] Ubuntu Files/' ~ vm_name ~ '_ubuntu.iso' }}
        unattend_iso_path: >-
          {{ '[VMs] ISOs/' ~ vm_name ~ '_unattend.iso' if os == 'Windows' else '' }}

    #Create the list of virtual CD-ROM drives to mount ISO images to the VM
    - name: Create cdrom list
      set_fact:
        cdrom_list: >-
          {{
            [
              {
                "controller_number": 0,
                "unit_number": 0,
                "state": "present",
                "type": "iso",
                "iso_path": os_iso_path
              }
            ]
            +
            (
              [
                {
                  "controller_number": 0,
                  "unit_number": 1,
                  "state": "present",
                  "type": "iso",
                  "iso_path": unattend_iso_path
                }
              ] if os == 'Windows' else []
            )
            +
            ([{
              "controller_type": "sata",
              "controller_number": 2,
              "unit_number": 0,
              "state": "present",
              "type": "iso",
              "iso_path": "[VMs] ISOs/windows.iso"
            }] if os == 'Windows' else [])
          }}

    # Create and power on a VM with user-defined configuration (OS, memory, CPU, disk, network)
    - name: Create VM based on form input
      community.vmware.vmware_guest:
        hostname: "10.0.1.40"
        username: "root"
        password: "CNIT490sp25"
        validate_certs: false
        datacenter: "ha-datacenter"
        folder: "/vm/"
        name: "{{ vm_name }}"
        state: poweredon
        guest_id: "{{ 'windows9Server64Guest' if os == 'Windows' else 'Ubuntu64Guest' }}"
        disk:
          - size_gb: "{{ storage | default(20) | int }}"
            type: thin
            datastore: VMs
        hardware:
          memory_mb: "{{ (memory | default(2) | int) * 1024 }}"
          num_cpus: "{{ cpu | default(1) | int }}"
        cdrom: "{{ cdrom_list }}"
        networks:
          - name: VLAN30 - host VMs
            dns_servers: 10.0.1.50
            type: dhcp
        wait_for_ip_address: "{{ 'false' if os == 'Windows' else 'true' }}"
      delegate_to: localhost
      register: vm_creation_result
      ignore_errors: true